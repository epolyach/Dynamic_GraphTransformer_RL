#!/usr/bin/env python3
"""
Test Instance Route Visualization Module

This module creates visualizations of the routes generated by different models
on a test CVRP instance, similar to the experimental branch implementation.
"""

import os
import json
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import torch


def plot_test_instance_routes(test_analysis, config, logger, save_dir="results/small/plots"):
    """
    Plot routes for all models on the test instance with annotated styling.
    
    Args:
        test_analysis: Dictionary containing test instance data and model results
        config: Configuration dictionary containing problem parameters
        logger: Logger for output messages
        save_dir: Directory to save plots
    """
    # Ensure save directory exists
    os.makedirs(save_dir, exist_ok=True)
    
    # Extract test instance data
    test_instance = test_analysis['test_instance']
    coords = np.array(test_instance['coords'])
    demands = np.array(test_instance['demands'], dtype=np.int32)  # Ensure integers
    capacity = int(test_instance['capacity'])  # Ensure integer
    n_customers = config['num_customers']
    
    # Get model results
    model_results = test_analysis['model_results']
    naive_baseline = test_analysis['naive_baseline']
    
    # Load validation costs for comparison (if available)
    validation_costs = {}
    try:
        # Try to load the comparative study results to get validation costs
        import torch
        comparative_results = torch.load('results/small/analysis/comparative_study_complete.pt', map_location='cpu', weights_only=False)
        results = comparative_results.get('results', {})
        for model_name in model_results.keys():
            if model_name in results:
                validation_costs[model_name] = results[model_name]['final_val_cost'] / n_customers
    except Exception as e:
        logger.warning(f"Could not load validation costs: {e}")
    
    logger.info("🎨 Creating route visualization plots...")
    
    # Plot styling parameters
    base_size = 4.0
    scale_size = 30.0
    sizes = base_size + scale_size * demands
    
    # Colors for different models
    route_colors = {
        'Pointer+RL': 'green',
        'GT-Greedy': 'blue',
        'GT+RL': 'purple',
        'DGT+RL': 'orange',
        'GAT+RL': 'brown',
        'GAT+RL (legacy)': 'pink',
        'Naive Baseline': 'red'
    }
    
    # Create plots for each model
    for model_name, results in model_results.items():
        validation_cost = validation_costs.get(model_name, None)
        create_model_route_plot(
            coords, demands, sizes, 
            results['greedy_route'], 
            results['greedy_cost_per_customer'],
            model_name, 
            route_colors.get(model_name, 'gray'),
            save_dir,
            capacity,
            validation_cost
        )
        
        logger.info(f"   📊 Saved route plot for {model_name}")
    
    # Create naive baseline plot (no validation cost for naive baseline)
    create_model_route_plot(
        coords, demands, sizes,
        naive_baseline['route'],
        naive_baseline['cost_per_customer'],
        'Naive Baseline',
        route_colors['Naive Baseline'],
        save_dir,
        capacity,
        None  # No validation cost for naive baseline
    )
    
    logger.info(f"   📊 Saved route plot for Naive Baseline")
    
    # Create comparison subplot with all models
    create_comparison_plot(coords, demands, sizes, model_results, naive_baseline, route_colors, save_dir)
    logger.info(f"   📊 Saved comparison plot with all models")
    
    logger.info(f"🎨 All route plots saved to {save_dir}")


def analyze_route_trips(route, demands, capacity):
    """Analyze route to identify trips and validate demand constraints."""
    trips = []
    current_trip = []
    current_demand = 0
    
    for i, node in enumerate(route):
        current_trip.append(node)
        
        if node == 0 and len(current_trip) > 1:  # End of trip (return to depot)
            # Calculate trip demand (excluding depot nodes)
            trip_customers = [n for n in current_trip if n != 0]
            trip_demand = sum(int(demands[customer]) for customer in trip_customers)
            
            trips.append({
                'nodes': current_trip[:],
                'customers': trip_customers,
                'demand': trip_demand,
                'capacity_used': trip_demand / capacity * 100,
                'valid': trip_demand <= capacity
            })
            
            current_trip = [0]  # Start new trip at depot
    
    return trips

def create_model_route_plot(coords, demands, sizes, route, cost_per_customer, model_name, color, save_dir, capacity, validation_cost=None):
    """Create a single route plot for one model with trip analysis."""
    n = len(coords)
    
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Analyze trips
    trips = analyze_route_trips(route, demands, capacity)
    
    # Print trip analysis
    print(f"\n🚛 {model_name} - Trip Analysis:")
    print(f"   Total trips: {len(trips)}")
    total_demand = 0
    for i, trip in enumerate(trips, 1):
        status = "✅" if trip['valid'] else "❌"
        print(f"   Trip {i}: {' → '.join(map(str, trip['nodes']))}")
        print(f"           Customers: {trip['customers']} | Demand: {trip['demand']}/{capacity} ({trip['capacity_used']:.1f}%) {status}")
        total_demand += trip['demand']
    print(f"   Total demand served: {total_demand}")
    
    # Plot route segments with different styles based on trip type
    trip_colors = plt.cm.Set3(range(len(trips)))  # Different colors for multi-customer trips
    
    # Plot each trip with appropriate styling
    multi_trip_idx = 0  # Counter for multi-customer trips only
    
    for trip_idx, trip in enumerate(trips):
        trip_nodes = trip['nodes']
        is_round_trip = len(trip['customers']) == 1  # Only one customer in this trip
        
        if is_round_trip:
            # Round trip (0->customer->0): light grey solid line
            trip_color = 'lightgrey'
            alpha = 0.7
            linewidth = 1.5
            label = 'Round trip' if trip_idx == 0 and any(len(t['customers']) == 1 for t in trips) else ''
        else:
            # Multi-customer trip: use distinct colors
            if multi_trip_idx < len(trip_colors):
                trip_color = trip_colors[multi_trip_idx]
            else:
                trip_color = color
            alpha = 0.8
            linewidth = 2.0
            label = f'Trip {multi_trip_idx + 1}' if multi_trip_idx == 0 else ''
            multi_trip_idx += 1
        
        # Plot all segments in this trip with the same color/style
        for i in range(len(trip_nodes) - 1):
            a, b = trip_nodes[i], trip_nodes[i + 1]
            ax.plot([coords[a, 0], coords[b, 0]], 
                   [coords[a, 1], coords[b, 1]], 
                   '-', color=trip_color, alpha=alpha, linewidth=linewidth,
                   label=label if i == 0 else '')  # Only label first segment of each trip type
            label = ''  # Clear label after first use
    
    # Plot depot (node 0) with star marker
    ax.scatter(coords[0:1, 0], coords[0:1, 1], 
              marker='*', s=200, c='red', 
              edgecolors='black', linewidths=1.5, 
              label='Depot', zorder=10)
    
    # Annotate depot
    '''
    ax.annotate('(0, 0.0)', (coords[0, 0], coords[0, 1]), 
               textcoords='offset points', xytext=(8, 8), 
               fontsize=10, color='black', fontweight='bold')
    '''
    
    # Plot customers with size proportional to demand
    ax.scatter(coords[1:, 0], coords[1:, 1], 
              s=sizes[1:], c='lightblue', 
              edgecolors='black', linewidths=1.0, 
              label='Customers', zorder=5)
    
    # Annotate customers with (index, demand) - show integer demands
    for i in range(1, n):
        ax.annotate(f'({i}, {int(demands[i])})', 
                   (coords[i, 0], coords[i, 1]), 
                   textcoords='offset points', xytext=(8, 8), 
                   fontsize=8, color='black')
    
    # Create title with test instance cost and validation cost (if available)
    if validation_cost is not None:
        title = f'{model_name}\nCost per Customer: {cost_per_customer:.3f} (Val: {validation_cost:.3f})'
    else:
        title = f'{model_name}\nCost per Customer: {cost_per_customer:.3f}'
    
    # Styling
    ax.set_title(title, fontsize=14, fontweight='bold', pad=20)
    ax.set_xlabel('X Coordinate', fontsize=12)
    ax.set_ylabel('Y Coordinate', fontsize=12)
    ax.set_aspect('equal', adjustable='box')
    ax.grid(True, alpha=0.3)
    # ax.legend(loc='upper right', fontsize=10)
    
    # Set reasonable axis limits with some padding
    x_min, x_max = coords[:, 0].min(), coords[:, 0].max()
    y_min, y_max = coords[:, 1].min(), coords[:, 1].max()
    padding = 0.05
    ax.set_xlim(x_min - padding, x_max + padding)
    ax.set_ylim(y_min - padding, y_max + padding)
    
    plt.tight_layout()
    
    # Save plot
    filename = f"test_route_{model_name.replace(' ', '_').replace('+', 'plus').lower()}.png"
    plt.savefig(os.path.join(save_dir, filename), dpi=300, bbox_inches='tight')
    plt.close()
    
    # Save route as JSON
    json_filename = f"test_route_{model_name.replace(' ', '_').replace('+', 'plus').lower()}.json"
    with open(os.path.join(save_dir, json_filename), 'w') as f:
        json.dump({
            'model_name': model_name,
            'route': route,
            'cost_per_customer': cost_per_customer,
            'coordinates': coords.tolist(),
            'demands': demands.tolist()
        }, f, indent=2)


def create_comparison_plot(coords, demands, sizes, model_results, naive_baseline, route_colors, save_dir):
    """Create a comparison plot showing all model routes in subplots."""
    # Determine subplot layout
    n_models = len(model_results) + 1  # +1 for naive baseline
    cols = 3
    rows = (n_models + cols - 1) // cols
    
    fig, axes = plt.subplots(rows, cols, figsize=(5*cols, 5*rows))
    if rows == 1:
        axes = [axes] if cols == 1 else axes
    else:
        axes = axes.flatten()
    
    plot_idx = 0
    
    # Plot each model
    for model_name, results in model_results.items():
        ax = axes[plot_idx]
        route = results['greedy_route']
        cost_per_customer = results['greedy_cost_per_customer']
        color = route_colors.get(model_name, 'gray')
        
        # Plot route
        for i in range(len(route) - 1):
            a, b = route[i], route[i + 1]
            ax.plot([coords[a, 0], coords[b, 0]], 
                   [coords[a, 1], coords[b, 1]], 
                   '-', color=color, alpha=0.85, linewidth=1.5)
        
        # Plot nodes
        ax.scatter(coords[0:1, 0], coords[0:1, 1], 
                  marker='*', s=100, c='red', 
                  edgecolors='black', linewidths=1.0)
        ax.scatter(coords[1:, 0], coords[1:, 1], 
                  s=sizes[1:]*0.3, c='lightblue', 
                  edgecolors='black', linewidths=0.5)
        
        ax.set_title(f'{model_name}\n{cost_per_customer:.3f}/cust', 
                    fontsize=10, fontweight='bold')
        ax.set_aspect('equal', adjustable='box')
        ax.grid(True, alpha=0.3)
        
        plot_idx += 1
    
    # Plot naive baseline
    if plot_idx < len(axes):
        ax = axes[plot_idx]
        route = naive_baseline['route']
        cost_per_customer = naive_baseline['cost_per_customer']
        color = route_colors['Naive Baseline']
        
        # Plot route
        for i in range(len(route) - 1):
            a, b = route[i], route[i + 1]
            ax.plot([coords[a, 0], coords[b, 0]], 
                   [coords[a, 1], coords[b, 1]], 
                   '-', color=color, alpha=0.85, linewidth=1.5)
        
        # Plot nodes
        ax.scatter(coords[0:1, 0], coords[0:1, 1], 
                  marker='*', s=100, c='red', 
                  edgecolors='black', linewidths=1.0)
        ax.scatter(coords[1:, 0], coords[1:, 1], 
                  s=sizes[1:]*0.3, c='lightblue', 
                  edgecolors='black', linewidths=0.5)
        
        ax.set_title(f'Naive Baseline\n{cost_per_customer:.3f}/cust', 
                    fontsize=10, fontweight='bold')
        ax.set_aspect('equal', adjustable='box')
        ax.grid(True, alpha=0.3)
        
        plot_idx += 1
    
    # Hide unused subplots
    for i in range(plot_idx, len(axes)):
        axes[i].set_visible(False)
    
    plt.suptitle('Test Instance Route Comparison', fontsize=16, fontweight='bold')
    plt.tight_layout()
    
    # Save comparison plot
    plt.savefig(os.path.join(save_dir, "test_routes_comparison.png"), 
                dpi=300, bbox_inches='tight')
    plt.close()


def create_interactive_route_analysis(test_analysis, config, save_dir="results/small/analysis"):
    """
    Create an interactive HTML report with route analysis.
    """
    os.makedirs(save_dir, exist_ok=True)
    
    # Extract data
    test_instance = test_analysis['test_instance']
    model_results = test_analysis['model_results']
    naive_baseline = test_analysis['naive_baseline']
    
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>CVRP Test Instance Route Analysis</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ text-align: center; margin-bottom: 40px; }}
        .instance-info {{ background-color: #f5f5f5; padding: 20px; border-radius: 5px; margin-bottom: 30px; }}
        .model-results {{ margin-bottom: 30px; }}
        .model {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }}
        .route {{ font-family: monospace; background-color: #f9f9f9; padding: 10px; margin: 10px 0; }}
        .best {{ background-color: #d4edda; border-color: #c3e6cb; }}
        .worst {{ background-color: #f8d7da; border-color: #f5c6cb; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>CVRP Test Instance Route Analysis</h1>
        <p>Comparative analysis of different models on a test CVRP instance</p>
    </div>
    
    <div class="instance-info">
        <h2>Test Instance Information</h2>
        <p><strong>Number of customers:</strong> {config['num_customers']}</p>
        <p><strong>Vehicle capacity:</strong> {int(test_instance['capacity'])}</p>
        <p><strong>Coordinate range:</strong> [0, 1] (normalized)</p>
        <p><strong>Total demand:</strong> {int(sum(test_instance['demands'][1:]))}</p>
    </div>
    
    <div class="model-results">
        <h2>Model Performance Summary</h2>
        <table>
            <tr>
                <th>Model</th>
                <th>Greedy Cost/Customer</th>
                <th>Sample Cost/Customer</th>
                <th>Greedy Improvement vs Naive</th>
                <th>Route Length</th>
            </tr>
"""
    
    # Sort models by greedy performance
    sorted_models = sorted(model_results.items(), 
                          key=lambda x: x[1]['greedy_cost_per_customer'])
    
    best_cost = sorted_models[0][1]['greedy_cost_per_customer']
    worst_cost = sorted_models[-1][1]['greedy_cost_per_customer']
    
    for model_name, results in sorted_models:
        css_class = ""
        if results['greedy_cost_per_customer'] == best_cost:
            css_class = "best"
        elif results['greedy_cost_per_customer'] == worst_cost:
            css_class = "worst"
        
        html_content += f"""
            <tr class="{css_class}">
                <td>{model_name}</td>
                <td>{results['greedy_cost_per_customer']:.3f}</td>
                <td>{results['sample_cost_per_customer']:.3f}</td>
                <td>{results['greedy_improvement']:.1f}%</td>
                <td>{len(results['greedy_route'])}</td>
            </tr>
"""
    
    html_content += f"""
            <tr>
                <td><strong>Naive Baseline</strong></td>
                <td>{naive_baseline['cost_per_customer']:.3f}</td>
                <td>{naive_baseline['cost_per_customer']:.3f}</td>
                <td>0.0%</td>
                <td>{len(naive_baseline['route'])}</td>
            </tr>
        </table>
    </div>
    
    <div class="model-results">
        <h2>Detailed Route Analysis</h2>
"""
    
    for model_name, results in sorted_models:
        route_str = " → ".join(map(str, results['greedy_route']))
        html_content += f"""
        <div class="model">
            <h3>{model_name}</h3>
            <p><strong>Cost per customer:</strong> {results['greedy_cost_per_customer']:.3f}</p>
            <p><strong>Total cost:</strong> {results['greedy_cost']:.3f}</p>
            <p><strong>Route:</strong></p>
            <div class="route">{route_str}</div>
        </div>
"""
    
    # Add naive baseline
    route_str = " → ".join(map(str, naive_baseline['route']))
    html_content += f"""
        <div class="model">
            <h3>Naive Baseline</h3>
            <p><strong>Cost per customer:</strong> {naive_baseline['cost_per_customer']:.3f}</p>
            <p><strong>Total cost:</strong> {naive_baseline['cost']:.3f}</p>
            <p><strong>Route:</strong></p>
            <div class="route">{route_str}</div>
        </div>
    """
    
    html_content += """
    </div>
</body>
</html>
"""
    
    # Save HTML report
    with open(os.path.join(save_dir, "test_instance_analysis.html"), 'w') as f:
        f.write(html_content)


if __name__ == "__main__":
    # This can be run standalone for testing
    print("Route visualization module loaded successfully!")
