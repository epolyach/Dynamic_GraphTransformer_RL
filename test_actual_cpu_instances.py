#!/usr/bin/env python3
"""
Test what instances are ACTUALLY generated by CPU benchmark
"""

import numpy as np
import sys
sys.path.append('research/benchmark_exact')
from enhanced_generator import EnhancedCVRPGenerator, InstanceType
from solvers.exact_dp import solve as cpu_solve

# Replicate EXACT parameters from benchmark_exact_cpu.py
def generate_cpu_benchmark_instance(n_customers, instance_idx):
    """Generate instance exactly as CPU benchmark does"""
    gen = EnhancedCVRPGenerator(config={})
    
    # Exact same seed formula as benchmark_exact_cpu.py line 620
    seed = 4242 + n_customers * 1000 + instance_idx * 10 + 0  # attempt=0
    
    # Exact same parameters from benchmark
    instance = gen.generate_instance(
        num_customers=n_customers,
        capacity=30,           # Fixed capacity
        coord_range=100,       # Integer coords [0,100] then normalized
        demand_range=[1, 10],  # Integer demands
        seed=seed,
        instance_type=InstanceType.RANDOM,
        apply_augmentation=False,
    )
    return instance

def test_cpu_instances():
    """Test actual CPU benchmark instances"""
    print("Testing ACTUAL CPU benchmark instances (N=6)")
    print("=" * 60)
    
    n_customers = 6
    n_test = 100
    
    cpcs = []
    capacities = []
    
    for i in range(n_test):
        instance = generate_cpu_benchmark_instance(n_customers, i)
        
        # Verify capacity
        capacities.append(instance['capacity'])
        
        # Solve
        result = cpu_solve(instance, time_limit=60.0, verbose=False)
        cpcs.append(result.cost / n_customers)
        
        if i < 5:
            print(f"\nInstance {i}:")
            print(f"  Seed: {4242 + n_customers * 1000 + i * 10}")
            print(f"  Capacity: {instance['capacity']}")
            print(f"  Demands: {instance['demands']}")
            print(f"  Cost: {result.cost:.4f}, CPC: {result.cost/n_customers:.4f}")
    
    cpcs = np.array(cpcs)
    
    print("\n" + "=" * 60)
    print("RESULTS:")
    print(f"  All capacities: {set(capacities)} (should be {30})")
    print(f"  Mean CPC: {cpcs.mean():.6f}")
    print(f"  Std CPC: {cpcs.std():.6f}")
    print(f"  Min CPC: {cpcs.min():.6f}")
    print(f"  Max CPC: {cpcs.max():.6f}")
    
    print("\nCompare with reported values:")
    print("  CPU benchmark reported: Mean CPC = 0.465060, Std = 0.084619")
    print(f"  Our replication:        Mean CPC = {cpcs.mean():.6f}, Std = {cpcs.std():.6f}")

if __name__ == "__main__":
    test_cpu_instances()
