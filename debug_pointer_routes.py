#!/usr/bin/env python3
"""
Debug script to examine routes generated by Baseline Pointer Network
and compare with naive baseline to identify the bug
"""

import torch
import numpy as np
import sys

# Import from our main script
from run_comparative_study import (
    BaselinePointerNetwork, generate_cvrp_instance, 
    compute_route_cost, compute_naive_baseline_cost,
    validate_route, set_seeds
)

def debug_pointer_routes():
    """Debug routes generated by Baseline Pointer Network"""
    print("🔍 DEBUGGING BASELINE POINTER NETWORK ROUTES")
    print("=" * 50)
    
    set_seeds(42)
    
    # Generate a few test instances (same as in main script)
    instances = []
    for i in range(5):  # Just 5 instances for debugging
        instance = generate_cvrp_instance(
            num_customers=6, capacity=3, coord_range=50, 
            demand_range=(1, 3), seed=i
        )
        instances.append(instance)
    
    # Initialize Baseline Pointer Network
    model = BaselinePointerNetwork(input_dim=3, hidden_dim=64)
    
    print("\n📊 ANALYZING INDIVIDUAL ROUTES:")
    print("-" * 50)
    
    total_naive_cost = 0
    total_model_cost = 0
    
    for i, instance in enumerate(instances):
        print(f"\n🔸 INSTANCE {i}:")
        
        # Calculate naive baseline cost
        naive_cost = compute_naive_baseline_cost(instance)
        naive_normalized = naive_cost / 6  # 6 customers
        
        print(f"   Naive baseline: {naive_cost:.2f} total, {naive_normalized:.4f}/cust")
        
        # Generate route with Baseline Pointer
        routes, _ = model([instance], greedy=True)
        route = routes[0]
        
        print(f"   Generated route: {route}")
        
        # Validate route
        try:
            validate_route(route, 6, "DEBUG")
            print("   ✅ Route validation: PASSED")
        except Exception as e:
            print(f"   ❌ Route validation: FAILED - {e}")
            continue
        
        # Calculate model cost
        model_cost = compute_route_cost(route, instance['distances'])
        model_normalized = model_cost / 6
        
        print(f"   Model cost: {model_cost:.2f} total, {model_normalized:.4f}/cust")
        
        # Compare costs
        if model_cost > naive_cost:
            print(f"   🚨 BUG DETECTED: Model cost ({model_cost:.2f}) > Naive cost ({naive_cost:.2f})")
            print(f"   🚨 Excess: +{model_cost - naive_cost:.2f} total, +{model_normalized - naive_normalized:.4f}/cust")
            
            # Let's examine this route in detail
            print("\n   🔍 DETAILED ROUTE ANALYSIS:")
            print(f"      Coordinates: {instance['coords']}")
            print(f"      Demands: {instance['demands']}")
            print(f"      Route: {route}")
            
            # Calculate distance for each segment
            print("      Route segments:")
            total_distance = 0
            for j in range(len(route) - 1):
                from_node = route[j]
                to_node = route[j + 1]
                segment_dist = instance['distances'][from_node, to_node]
                total_distance += segment_dist
                print(f"        {from_node} -> {to_node}: {segment_dist:.2f}")
            print(f"      Total route distance: {total_distance:.2f}")
            
            # Compare with naive route segments
            print("\n      Naive baseline segments:")
            naive_total = 0
            for customer in range(1, 7):  # customers 1-6
                depot_to_customer = instance['distances'][0, customer]
                customer_to_depot = instance['distances'][customer, 0]
                naive_total += depot_to_customer + customer_to_depot
                print(f"        0 -> {customer} -> 0: {depot_to_customer:.2f} + {customer_to_depot:.2f} = {depot_to_customer + customer_to_depot:.2f}")
            print(f"      Total naive distance: {naive_total:.2f}")
            
        else:
            improvement = naive_cost - model_cost
            print(f"   ✅ Model better by {improvement:.2f} total, {(naive_normalized - model_normalized):.4f}/cust")
        
        total_naive_cost += naive_cost
        total_model_cost += model_cost
        print()
    
    # Summary
    print("=" * 50)
    print("📋 SUMMARY:")
    print(f"Total naive cost: {total_naive_cost:.2f}")
    print(f"Total model cost: {total_model_cost:.2f}")
    print(f"Average naive cost/customer: {total_naive_cost / (5 * 6):.4f}")
    print(f"Average model cost/customer: {total_model_cost / (5 * 6):.4f}")
    
    if total_model_cost > total_naive_cost:
        print(f"🚨 OVERALL BUG: Model is {total_model_cost - total_naive_cost:.2f} worse than naive!")
    else:
        print(f"✅ Overall: Model is {total_naive_cost - total_model_cost:.2f} better than naive")

if __name__ == "__main__":
    debug_pointer_routes()
